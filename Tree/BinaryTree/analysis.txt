------------------------------------
# Basic Operations On Binary Tree:
------------------------------------
- Inserting an element.
- Removing an element.
- Searching for an element.
- Deletion for an element.
- Traversing an element. There are four (mainly three) types of traversals in a binary tree which will be discussed ahead.

------------------------------------
# Auxiliary Operations On Binary Tree:
------------------------------------
- Finding the height of the tree
- Find the level of the tree
- Finding the size of the entire tree.

------------------------------------
# Applications of Binary Tree:
------------------------------------
- In compilers, Expression Trees are used which is an application of binary trees.
- Huffman coding trees are used in data compression algorithms.
- Priority Queue is another application of binary tree that is used for searching maximum or minimum in O(1) time complexity.
- Represent hierarchical data.
- Used in editing software like Microsoft Excel and spreadsheets.
- Useful for indexing segmented at the database is useful in storing cache in the system,
- Syntax trees are used for most famous compilers for programming like GCC, and AOCL to perform arithmetic operations.
- For implementing priority queues.
- Used to find elements in less time (binary search tree)
- Used to enable fast memory allocation in computers. 
- Used to perform encoding and decoding operations.
- Binary trees can be used to organize and retrieve information from large datasets, such as in inverted index and k-d trees.
- Binary trees can be used to represent the decision-making process of computer-controlled characters in games, such as in decision trees.
- Binary trees can be used to implement searching algorithms, such as in binary search trees which can be used to quickly find an element in a sorted list.
- Binary trees can be used to implement sorting algorithms, such as in heap sort which uses a binary heap to sort elements efficiently.
- Binary Tree Traversals:

------------------------------------
# Tree Traversal algorithms can be classified broadly into two categories:
------------------------------------
1. Depth-First Search (DFS) Algorithms:
    a. Pre-Order Traversal
    b. In-Order Traversal
    c. Post-Order Traversal

2. Breadth-First Search (BFS) Algorithms
    a. Level Order Traversal